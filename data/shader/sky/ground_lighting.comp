#version 450
#extension GL_EXT_debug_printf : enable

#include "ground_lighting.h"
#include "env_set.h"
#include "sun_set.h"
#include "scattering.h"
#include "functions.glsl"

#include "cubemap.glsl"

// provides hemisphere_vecs-array.
#include "hemisphere_vecs.glsl"

SUN_SET(GRL_SETS_SUN)

layout (set = GRL_SETS_RATIO, binding = 0) uniform ratio_uniform_t {
	float ratio;
} ratio;

ENV_SET(GRL_SETS_ENV0, env0)
ENV_SET(GRL_SETS_ENV1, env1)

layout (set = GRL_SETS_SCATTERING_SAMPLER0, binding = 0) uniform sampler3D scattering0;
layout (set = GRL_SETS_SCATTERING_SAMPLER1, binding = 0) uniform sampler3D scattering1;

layout (set = GRL_SETS_CUBEMAP_IMAGE, binding = 0, rgba16f) uniform writeonly image2DArray cubemap_faces;

void main() {
	float atmosphere_height = mix(env0.atmosphere_height, env1.atmosphere_height, ratio.ratio);
	float r_planet = mix(env0.r_planet, env1.r_planet, ratio.ratio);

	vec2 viewport_coord = vec2(gl_WorkGroupID.xy)/vec2(GRL_X-1, GRL_Y-1);
	vec3 normal = worldDirFromCubemapUV(viewport_coord, int(gl_WorkGroupID.z));

	// at ground level.
	float tex_x = height_to_tex(10, atmosphere_height);
	// y is cos with (0,1,0).
	float tex_z = sun_to_tex(sun.sun_dir.y);


	vec3 tex_coord = vec3(
		tex_address_shifted(tex_x, SCATTERING_RESOLUTION_HEIGHT), 
		0, 
		tex_address_shifted(tex_z, SCATTERING_RESOLUTION_SUN) );

	int count = 0;

	vec3 sc_sum0 = vec3(0,0,0);
	vec3 sc_sum1 = vec3(0,0,0);
	for (int i = 0; i != GRL_ZENITH_ANGLES; ++i) {
		// dot with up. The Zenith-angle won't change in the inner loop, only azimuth.
		float view_cos = hemisphere_vecs[i][0].y;
		tex_coord.y = tex_address_shifted(view_to_tex(view_cos, 10, r_planet), SCATTERING_RESOLUTION_VIEW);

		vec4 r_rgb_m_r0 = texture(scattering0, tex_coord);
		vec3 m_rgb0 = mie_from_rayleigh(r_rgb_m_r0, env0.rayleigh_scattering_coefficient, env0.mie_scattering_coefficient);

		vec4 r_rgb_m_r1 = texture(scattering1, tex_coord);
		vec3 m_rgb1 = mie_from_rayleigh(r_rgb_m_r1, env1.rayleigh_scattering_coefficient, env1.mie_scattering_coefficient);

		for (int j = 0; j != hemisphere_hor_sizes[i]; ++j) {
			float view_sun_cos = dot(hemisphere_vecs[i][j], sun.sun_dir);
			float view_normal_cos = max(dot(hemisphere_vecs[i][j], normal), 0);
			count += view_normal_cos > 0 ? 1:0;
			sc_sum0 += view_normal_cos * (
				phase_m(view_sun_cos, env0.asymmetry_factor)*m_rgb0 +
				phase_r(view_sun_cos)*r_rgb_m_r0.rgb );

			sc_sum1 += view_normal_cos * (
				phase_m(view_sun_cos, env1.asymmetry_factor)*m_rgb1 +
				phase_r(view_sun_cos)*r_rgb_m_r1.rgb );
		}
	}

	// sample once in direction of the sun to prevent flickering.
	float view_cos = sun.sun_dir.y;
	tex_coord.y = tex_address_shifted(view_to_tex(view_cos, 10, r_planet), SCATTERING_RESOLUTION_VIEW);

	vec4 r_rgb_m_r0 = texture(scattering0, tex_coord);
	vec3 m_rgb0 = mie_from_rayleigh(r_rgb_m_r0, env0.rayleigh_scattering_coefficient, env0.mie_scattering_coefficient);

	vec4 r_rgb_m_r1 = texture(scattering1, tex_coord);
	vec3 m_rgb1 = mie_from_rayleigh(r_rgb_m_r1, env1.rayleigh_scattering_coefficient, env1.mie_scattering_coefficient);

	float view_sun_cos = 1;
	float view_normal_cos = max(dot(sun.sun_dir, normal), 0);
	count += view_normal_cos > 0 ? 1:0;
	sc_sum0 += view_normal_cos * (
		phase_m(view_sun_cos, env0.asymmetry_factor)*m_rgb0 +
		phase_r(view_sun_cos)*r_rgb_m_r0.rgb );

	sc_sum1 += view_normal_cos * (
		phase_m(view_sun_cos, env1.asymmetry_factor)*m_rgb1 +
		phase_r(view_sun_cos)*r_rgb_m_r1.rgb );

	vec3 incoming_light = sun.color * mix(sc_sum0, sc_sum1, ratio.ratio)/(count);

	imageStore(cubemap_faces, ivec3(gl_WorkGroupID), vec4(incoming_light, 0));
}
