#version 450
#extension GL_EXT_debug_printf : enable

#include "gathering.h"
#include "scattering.h"
#include "env_set.h"

layout (set = G_SETS_SCATTERING_SAMPLER, binding = 0) uniform sampler3D scattering_tex;
layout (set = G_SETS_SUM_IMAGE, binding = 0, rgba16f) uniform image2D sum_image;
layout (set = G_SETS_GATHERING_IMAGE, binding = 0, rgba16f) uniform writeonly image2D target_image;
ENV_SET(G_SETS_ENV, env)

layout (push_constant) uniform push_constants {
	uint offset;
} pc;

#include "functions.glsl"

vec4 gathered_light(float h, float c_sun) {
	vec4 gathered = vec4(0);
	vec3 tex_coord = vec3(height_to_tex(h, env.r_atmosphere), 0, sun_to_tex(c_sun));

	// don't count cos directly due to spacing (I think).
	// as cos(i) = cos(2*pi-i) it's enough to iterate up to pi and double the sum.
	for(float view = 0; view < pi; view+=(pi/GATHERING_STEPS)) {
		tex_coord.y = view_to_tex(cos(view), h, env.r_planet);
		gathered += texture(scattering_tex, tex_address_shifted(tex_coord, vec3(
			SCATTERING_RESOLUTION_HEIGHT,
			SCATTERING_RESOLUTION_VIEW,
			SCATTERING_RESOLUTION_SUN)));
	}
	gathered *= 2;

	// There were 2*GATHERING_STEPS many values, we just skipped actually
	// calculating the second half.
	return gathered * (4*pi / (2*GATHERING_STEPS));
}

void main() {
	float tex_height = float(pc.offset + gl_WorkGroupID.x)/(GATHERING_RESOLUTION_HEIGHT-1);
	float tex_sun = float(gl_WorkGroupID.y)/(GATHERING_RESOLUTION_SUN-1);

	float actual_height = clamp(tex_to_height(tex_height, env.atmosphere_height), 0.3, env.atmosphere_height-1);
	float c_sun = tex_to_sun(tex_sun);

	vec4 gathered = gathered_light(actual_height, c_sun);
	ivec2 tex_coord = ivec2(gl_WorkGroupID.x+pc.offset, gl_WorkGroupID.y);
	imageStore(target_image, tex_coord, gathered);
	// update sum. Maybe make atomic later?
	imageStore(sum_image, tex_coord, gathered + imageLoad(sum_image, tex_coord));
}
